#!/usr/bin/env node

const http = require('http');
const debug = require('debug')('server:server');
const mongoose = require('mongoose');
const app = require('../app');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);
server.on('error', onError);
server.on('listening', onListening);

mongoose.Promise = global.Promise;

connectToDatabase()
  .on('error', console.error.bind('MongoDB connection error:'))
  .on('disconnected', connectToDatabase)
  .once('open', listen);

function connectToDatabase() {
  const env = process.env;
  const uri = `mongodb://${encodeURIComponent(env.MONGO_USERNAME)}:${encodeURIComponent(env.MONGO_PASSWORD)}@${env.MONGO_SERVER}:${env.MONGO_PORT}/${env.MONGO_DATABASE}`;
  const options = {
    useMongoClient: true
  };
  mongoose.connect(uri, options);
  return mongoose.connection;
}

function listen() {
  server.listen(port);
}

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
